traefik:
  # Default values for Traefik

  deployment:
    # -- Additional initContainers (e.g. for setting file permission as shown below)
    initContainers:
    # The "volume-permissions" init container is required if you run into permission issues.
    # Related issue: https://github.com/traefik/traefik-helm-chart/issues/396
    - name: volume-permissions
      image: busybox:latest
      command: ["sh", "-c", "touch /data/acme.json; chmod -v 600 /data/acme.json"]
      volumeMounts:
      - mountPath: /data
        name: data

  # -- Create a default IngressClass for Traefik
  ingressClass:  # @schema additionalProperties: false
    isDefaultClass: false

  ingressRoute:
    dashboard:
      # -- Create an IngressRoute for the dashboard
      enabled: true

      # -- The router match rule used for the dashboard ingressRoute
      matchRule:

      # -- Specify the allowed entrypoints to use for the dashboard ingress route, (e.g. traefik, web, websecure).
      # By default, it's using traefik entrypoint, which is not exposed.
      # /!\ Do not expose your dashboard without any protection over the internet /!\
      entryPoints:
      - web
      - websecure

  providers:  # @schema additionalProperties: false
    kubernetesIngress:
      # -- When ingressClass is set, only Ingresses containing an annotation with the same value are processed. Otherwise, Ingresses missing the annotation, having an empty value, or the value traefik are processed.
      ingressClass: traefik # @schema type:[string, null]

  logs:
    general:
      # By default, the level is set to INFO.
      # -- Alternative logging levels are TRACE, DEBUG, INFO, WARN, ERROR, FATAL, and PANIC.
      level: INFO
    access:
      # -- To enable access logs
      enabled: false

  # -- Global command arguments to be passed to all traefik's pods
  globalArguments: []

  ports:
    traefik:
      # Defines whether the port is exposed if service.type is LoadBalancer or
      # NodePort.
      #
      # -- You SHOULD NOT expose the traefik port on production deployments.
      # If you want to access it from outside your cluster,
      # use `kubectl port-forward` or create a secure ingress
      expose:
        default: true
    web:
      # -- See [upstream documentation](https://doc.traefik.io/traefik/routing/entrypoints/#allowacmebypass)
      allowACMEByPass: true

  service:
    # -- Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
    annotations:
      io.cilium/lb-ipam-ips: 192.168.31.2

  persistence:
    # -- Enable persistence using Persistent Volume Claims
    # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/.
    # It can be used to store TLS certificates along with `certificatesResolvers.<name>.acme.storage`  option
    enabled: true
    storageClass: local-path

  # -- Certificates resolvers configuration.
  # Ref: https://doc.traefik.io/traefik/https/acme/#certificate-resolvers
  # See EXAMPLES.md for more details.
  certificatesResolvers:
    letsencrypt:
      acme:
        email:
        storage: /data/acme.json
        httpChallenge:
          entrypoint: web

  # -- [Pod Security Context](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context)
  # @default -- See _values.yaml_
  podSecurityContext:
    fsGroup: 65532
    fsGroupChangePolicy: OnRootMismatch

  #
  # -- Extra objects to deploy (value evaluated as a template)
  #
  # In some cases, it can avoid the need for additional, extended or adhoc deployments.
  # See #595 for more details and traefik/tests/values/extra.yaml for example.
  extraObjects:
  - apiVersion: v1
    kind: Service
    metadata:
      name: legacy-traefik
    spec:
      ports:
      - port: 443
        targetPort: 443

  - apiVersion: discovery.k8s.io/v1
    kind: EndpointSlice
    metadata:
      name: legacy-traefik-1
      labels:
        kubernetes.io/service-name: legacy-traefik
    addressType: IPv4
    ports:
    - appProtocol: https
      protocol: TCP
      port: 443
    endpoints:
    - addresses:
      - 192.168.1.55

  - apiVersion: traefik.io/v1alpha1
    kind: IngressRouteTCP
    metadata:
      name: legacy-router
    spec:
      entryPoints:
      - web
      - websecure
      routes:
      - match: "{{ include \"traefik.tcpRouterRule\" .Values.legacyUrls }}"
        services:
        - name: legacy-traefik
          port: 443
          nativeLB: true
          # tls: true
      tls:
        passthrough: true

  - apiVersion: traefik.io/v1alpha1
    kind: TLSStore
    metadata:
      name: default
    spec:
      certificates:
      - secretName: cloud-legacy-cert
      - secretName: docker-legacy-cert
      - secretName: homeassistant-legacy-cert
      - secretName: nsadmin-legacy-cert
      - secretName: onlyoffice-legacy-cert
      - secretName: pihole-legacy-cert
      - secretName: rudolfs-legacy-cert
      - secretName: sharex-legacy-cert
      - secretName: staging-nsadmin-legacy-cert
      - secretName: traefik-legacy-cert
      - secretName: trello-legacy-cert
      - secretName: unifi-legacy-cert
      - secretName: vpn-legacy-cert

  - apiVersion: traefik.io/v1alpha1
    kind: TLSOption
    metadata:
      name: default
    spec:
      minVersion: VersionTLS12
      sniStrict: true
