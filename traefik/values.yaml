traefik:
  # Default values for Traefik
  # This is a YAML-formatted file.
  # Declare variables to be passed into templates

  # -- Create a default IngressClass for Traefik
  ingressClass:  # @schema additionalProperties: false
    isDefaultClass: false

  # Traefik experimental features
  experimental:
    # -- Enable traefik experimental plugins
    plugins:
    # demo:
    #   moduleName: github.com/traefik/plugindemo
    #   version: v0.2.1
      plugin-rewritebody:
        moduleName: github.com/traefik/plugin-rewritebody
        version: v0.3.1

  ingressRoute:
    dashboard:
      # -- Create an IngressRoute for the dashboard
      enabled: true
      # -- The router match rule used for the dashboard ingressRoute
      matchRule:
      # -- Specify the allowed entrypoints to use for the dashboard ingress route, (e.g. traefik, web, websecure).
      # By default, it's using traefik entrypoint, which is not exposed.
      # /!\ Do not expose your dashboard without any protection over the internet /!\
      entryPoints:
      - websecure
      # -- Additional ingressRoute middlewares (e.g. for authentication)
      middlewares:
      - name: dashboard-auth
      # -- TLS options (e.g. secret containing certificate)
      tls:
        secretName: traefik-cert

  providers:  # @schema additionalProperties: false
    kubernetesCRD:
      # -- Allows to reference ExternalName services in IngressRoute
      allowExternalNameServices: true

    kubernetesIngress:
      # -- When ingressClass is set, only Ingresses containing an annotation with the same value are processed. Otherwise, Ingresses missing the annotation, having an empty value, or the value traefik are processed.
      ingressClass: traefik # @schema type:[string, null]

  logs:
    general:
      # By default, the level is set to INFO.
      # -- Alternative logging levels are TRACE, DEBUG, INFO, WARN, ERROR, FATAL, and PANIC.
      level: INFO
    access:
      # -- To enable access logs
      enabled: false

  # -- Global command arguments to be passed to all traefik's pods
  globalArguments: []

  ports:
    traefik:
      # Defines whether the port is exposed if service.type is LoadBalancer or
      # NodePort.
      #
      # -- You SHOULD NOT expose the traefik port on production deployments.
      # If you want to access it from outside your cluster,
      # use `kubectl port-forward` or create a secure ingress
      expose:
        default: true
    web:
      redirections:
        # -- Port Redirections
        # Added in 2.2, one can make permanent redirects via entrypoints.
        # Same sets of parameters: to, scheme, permanent and priority.
        # https://docs.traefik.io/routing/entrypoints/#redirection
        entryPoint:
          to: websecure
          scheme: https
          permanent: true
    websecure:
      # -- See [upstream documentation](https://doc.traefik.io/traefik/routing/entrypoints/#allowacmebypass)
      allowACMEByPass: true
      forwardedHeaders:
          # -- Trust forwarded headers information (X-Forwarded-*).
        trustedIPs:
        # Local
        - 192.168.1.0/24
        # Cloudflare
        - 173.245.48.0/20
        - 103.21.244.0/22
        - 103.22.200.0/22
        - 103.31.4.0/22
        - 141.101.64.0/18
        - 108.162.192.0/18
        - 190.93.240.0/20
        - 188.114.96.0/20
        - 197.234.240.0/22
        - 198.41.128.0/17
        - 162.158.0.0/15
        - 104.16.0.0/13
        - 104.24.0.0/14
        - 172.64.0.0/13
        - 131.0.72.0/22
        - 2400:cb00::/32
        - 2606:4700::/32
        - 2803:f800::/32
        - 2405:b500::/32
        - 2405:8100::/32
        - 2a06:98c0::/29
        - 2c0f:f248::/32

  service:
    # -- Additional annotations applied to both TCP and UDP services (e.g. for cloud provider specific config)
    annotations:
      io.cilium/lb-ipam-ips: 192.168.31.2

  #
  # -- Extra objects to deploy (value evaluated as a template)
  #
  # In some cases, it can avoid the need for additional, extended or adhoc deployments.
  # See #595 for more details and traefik/tests/values/extra.yaml for example.
  extraObjects:
  - apiVersion: cert-manager.io/v1
    kind: Certificate
    metadata:
      name: traefik-cert
    spec:
      secretName: traefik-cert
      dnsNames:
      - "{{ .Values.ingressHost }}"
      issuerRef:
        name: letsencrypt-staging
        kind: ClusterIssuer

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: dashboard-auth
    spec:
      basicAuth:
        secret: basic-auth-users

  - apiVersion: v1
    kind: Service
    metadata:
      name: legacy-traefik
    spec:
      externalName: 192.168.1.55
      type: ExternalName

  - apiVersion: traefik.io/v1alpha1
    kind: IngressRouteTCP
    metadata:
      name: legacy-router
    spec:
      entryPoints:
      - web
      - websecure
      routes:
      - match: "{{ include \"traefik.tcpRouterRule\" .Values.legacyUrls }}"
        services:
        - name: legacy-traefik
          port: 443
      tls:
        passthrough: true

  - apiVersion: traefik.io/v1alpha1
    kind: TLSStore
    metadata:
      name: default
    spec:
      certificates:
      - secretName: cloud-legacy-cert
      - secretName: docker-legacy-cert
      - secretName: homeassistant-legacy-cert
      - secretName: nsadmin-legacy-cert
      - secretName: onlyoffice-legacy-cert
      - secretName: pihole-legacy-cert
      - secretName: rudolfs-legacy-cert
      - secretName: sharex-legacy-cert
      - secretName: staging-nsadmin-legacy-cert
      - secretName: traefik-cert
      - secretName: trello-legacy-cert
      - secretName: unifi-legacy-cert
      - secretName: vpn-legacy-cert

  - apiVersion: traefik.io/v1alpha1
    kind: TLSOption
    metadata:
      name: default
    spec:
      minVersion: VersionTLS12
      sniStrict: true
